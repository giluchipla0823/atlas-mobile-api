<?php

namespace App\Exceptions;

use Exception;
use Illuminate\Database\QueryException;
use Throwable;
use Illuminate\Http\Request;
use App\Helpers\ValidationHelper;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpFoundation\Response;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        dd($e);
        // return parent::render($request, $e); // TODO: Change the autogenerated stub

        if ($e instanceof ValidationException) {
            return $this->convertValidationExceptionToResponse($e, $request);
        }

        if ($e instanceof AuthenticationException) {
            return $this->unauthenticated($request, $e);
        }

        if ($e instanceof AuthorizationException) {
            return response()->json([
                'error' => true,
                'message' => $e->getMessage(),
                'code' => Response::HTTP_UNAUTHORIZED
            ], Response::HTTP_UNAUTHORIZED);
        }

        if ($e instanceof  ModelNotFoundException) {
            $modelName = strtolower(class_basename($e->getModel()));

            return response()->json([
                'error' => true,
                'code' => Response::HTTP_NOT_FOUND,
                'message' => sprintf("There is no instance of %s with the specified id", $modelName)
            ], Response::HTTP_NOT_FOUND);
        }

        if ($e instanceof MethodNotAllowedHttpException) {
            return response()->json([
                'error' => true,
                'code' => Response::HTTP_METHOD_NOT_ALLOWED,
                'message' => 'The HTTP method specified in the request is invalid.'
            ], Response::HTTP_METHOD_NOT_ALLOWED);
        }

        if ($e instanceof NotFoundHttpException) {
            return response()->json([
                'error' => true,
                'code' => Response::HTTP_NOT_FOUND,
                'message' => 'The specified URL was not found.'
            ], Response::HTTP_NOT_FOUND);
        }

        if ($e instanceof QueryException) {
            return response()->json([
                'error' => true,
                'message' => $e->getMessage(),
                'code' => Response::HTTP_INTERNAL_SERVER_ERROR
            ], Response::HTTP_INTERNAL_SERVER_ERROR);
        }

        if ($e instanceof HttpException) {
            return response()->json([
                'error' => true,
                'code' => $e->getStatusCode(),
                'message' => $e->getMessage(),
            ], $e->getStatusCode());
        }

        if ($e instanceof Exception) {
            return response()->json([
                'error' => true,
                'code' => $e->getCode(),
                'message' => $e->getMessage(),
            ], $e->getCode());
        }

        return response()->json([
            'error' => true,
            'code' => Response::HTTP_INTERNAL_SERVER_ERROR,
            'message' => method_exists($e, 'getMessage') ? $e->getMessage() : 'Unexpected failure.',
        ], Response::HTTP_INTERNAL_SERVER_ERROR);
    }

    /**
     * @param Request $request
     * @param AuthenticationException $exception
     * @return \Illuminate\Http\JsonResponse|Response
     */
    protected function unauthenticated($request, AuthenticationException $exception)
    {
        if ($this->isFrontend($request)) {
            return parent::unauthenticated($request, $exception);
        }

        $code = Response::HTTP_UNAUTHORIZED;

        return response()->json([
            'error' => true,
            'code' => $code,
            'message' => $exception->getMessage()
        ], $code);
    }

    /**
     * @param ValidationException $e
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse|\Illuminate\Http\Response|Response
     */
    protected function convertValidationExceptionToResponse(ValidationException $e, $request)
    {
        if ($this->isFrontend($request)) {
            return parent::convertValidationExceptionToResponse($e, $request); // TODO: Change the autogenerated stub
        }

        $errors = ValidationHelper::formatErrors($e->validator->errors()->getMessages());

        $code = Response::HTTP_UNPROCESSABLE_ENTITY;

        return response()->json([
            'error' => true,
            'code' => $code,
            'message' => 'Validation failed.',
            'errors' => $errors
        ], $code);
    }

    /**
     * @param Request $request
     * @return bool
     */
    private function isFrontend(Request $request): bool {
        return $request->acceptsHtml() && collect($request->route()->middleware())->contains('web');
    }
}
